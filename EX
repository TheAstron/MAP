Task :   Sysfs Practice
        a.  Eliminate the goto labels from the LKM from example code 1, so that the
            behavior of this function remains unchanged in case of an exception.
       b. Change the LKM from example code 1 or example code 2  so that it creates a
           directory with a file directly in the /sys directory.
       c. Write a  LKM that will create a file in the moduleâ€™s subdirectory (under the /sys path) into which the
           user will be able to write only natural numbers from 1 to 7. All other values should be ignored. Once
          the correct number is entered, the module should create as many new files in the subdirectory as the          given value is. Names of those new files can be created by adding continuous numbers to the primary
         file name. The module should store random numbers in the files. Files along with the subdirectory
          should be removed by the module exit.
/* CODE 1 */

#include<linux/module.h>
#include<linux/sysfs.h>
#include<linux/kobject.h>

 static struct kobject *kernel_object;
 static int number;

static ssize_t
 number_show(struct kobject *kernel_object, struct kobj_attribute *attribute, char *buffer)
 {
 return sprintf(buffer,"%d\n",number);
 }

 static ssize_t
 number_store(struct kobject *kernel_object, struct kobj_attribute *attribute, const char *buffer,
 size_t count)
 {
 sscanf(buffer,"%d",&number);
 return count;
 }

 static struct kobj_attribute number_kattribute =
 __ATTR(number,0664,number_show,number_store);

 static struct attribute *number_attribute = &number_kattribute.attr;

 static int __init sysfs_test_init(void)
 {
 kernel_object = kobject_create_and_add("test",&THIS_MODULE->mkobj.kobj);
 if(!kernel_object)
 goto err;

 if(sysfs_create_file(kernel_object,number_attribute))
 goto err1;

 return 0;
 err:
 printk(KERN_ALERT "Could not create a kobject!\n");
 return -ENOMEM;
 err1:
 kobject_del(kernel_object);
 printk(KERN_ALERT "Could not create a sysfs file!\n");
 return -ENOMEM;
 }

 static void __exit sysfs_test_exit(void)
 {
 sysfs_remove_file(kernel_object,number_attribute);
 if(kernel_object)
 kobject_del(kernel_object);
 }

 module_init(sysfs_test_init);
 module_exit(sysfs_test_exit);
 MODULE_DESCRIPTION("sysfs.");
 MODULE_LICENSE("GPL");

/* CODE 2 */

#include<linux/module.h>
#include<linux/sysfs.h>
#include<linux/kobject.h>
#include<linux/slab.h>

 #include<linux/string.h>

 static struct kobject *kernel_object;
 static int number;
 static const char attribute_name[] = "number";

 static ssize_t number_show(struct kobject *kernel_object, struct attribute *attribute, char *buffer)
 {
 return sprintf(buffer,"%d\n",number);
 }

 static ssize_t number_store(struct kobject *kernel_object, struct attribute *attribute, const char *buffer, size_t count)
 {
 sscanf(buffer,"%d",&number);
 return count;
 }

 static struct sysfs_ops operations = {
 .show = number_show,
 .store = number_store,
 };

 static void number_release(struct kobject *kernel_object)
 {
 kfree(kernel_object);
 pr_notice(" res. activated!\n");
 }

 static struct attribute number_attribute = {
 .name = attribute_name,
 .mode = 0600
 };

 static struct attribute *attributes[] = {
 &number_attribute,
 NULL
 };

 static struct kobj_type ktype =
 {
 .release = number_release,
 .sysfs_ops = &operations,
 .default_attrs = attributes,
 };

 static int __init sysfs_test_init(void)
 {
 kernel_object = (struct kobject *)kmalloc(sizeof(struct kobject),GFP_KERNEL);
 if(IS_ERR(kernel_object))
 goto err1;
 memset(kernel_object,0,sizeof(struct kobject));
 kobject_init(kernel_object,&ktype);
 if(kobject_add(kernel_object,&THIS_MODULE->mkobj.kobj,"test%d",2))
 goto err2;

 return 0;
 err2:
 kfree(kernel_object);
 kernel_object = NULL;
 err1:
 pr_alert("Error adding a kobject\n");
 return -ENOMEM;
 }

 static void __exit sysfs_test_exit(void)
 {
 if(kernel_object)
 kobject_put(kernel_object);
 }
module_init(sysfs_test_init);
module_exit(sysfs_test_exit);
MODULE_LICENSE("GPL");
MODULE_DESCRIPTION("sysfs 2.");
